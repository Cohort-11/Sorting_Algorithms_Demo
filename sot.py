#!/usr/bin/env python


import os
import csv
import timeit

emails = []
for filename in os.listdir("."):
    if filename.endswith(".csv"):
        # print(filename)

        with open(filename, "r") as file:
            reader = csv.reader(file)
            next(reader, None)

            for row in reader:
                # if len(row) > 2:
                # time complexity O(nm)
                emails.append(row[1])

# Add the email to search
email_to_search = ""

# linear search
start_time = timeit.default_timer()
for email in emails:
    if email == email_to_search:
        print("Email: {} was found using linear search".format(email_to_search))
end_time = timeit.default_timer()
L_elapsed_time = (end_time - start_time) * 1000000
print("linear search took: {} microseconds".format(L_elapsed_time))


# sorting first then linear search
# start_time = timeit.default_timer()
# for email in sorted(emails):
#     if email == email_to_search:
#         print("Email: {} was found using linear search with sorted list".format(email_to_search))
# end_time = timeit.default_timer()
# elapsed_time = (end_time - start_time) * 1000000
# print("linear search with sorted elements took: {} microseconds".format(elapsed_time))

# Binary search starts here
sorted_emails = sorted(emails)
start_time = timeit.default_timer()
found = False
low = 0
high = len(sorted_emails) - 1

# This code snipped was generated by chatGPT, concept to be covered in a later project
while low <= high:
    mid = (low + high) // 2
    if sorted_emails[mid] < email_to_search:
        low = mid + 1
    elif sorted_emails[mid] > email_to_search:
        high = mid - 1
    else:
        found = True
        break
end_time = timeit.default_timer()
elapsed_time = (end_time - start_time) * 1000000
print("Binary Search took: {} microseconds".format(elapsed_time))
print()
print("binary search is faster by: {}".format(L_elapsed_time/elapsed_time))


# print(len(emails))
